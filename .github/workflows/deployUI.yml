# This is a basic workflow to help you get started with Actions
name: Deploy UI

env:
    DOTNET_VERSION: '6.0.x'

# Controls when the workflow will run
on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

defaults:
    run:
      working-directory: ./src/Healthtrackr.UI

jobs:
    build-ui-project:
        runs-on: ubuntu-latest
        steps:
            - name: 'Checkout GitHub Action'
              uses: actions/checkout@main
            - name: 'Setup dotnet'
              uses: actions/setup-dotnet@v1
              with:
                dotnet-version: ${{ env.DOTNET_VERSION }}
            - name: 'Install Dependencies'
              run: dotnet restore
            - name: 'Build project'
              run: dotnet build --no-restore

    build-container-image:
        runs-on: ubuntu-latest
        needs: [build-ui-project]
        steps:
            - name: 'Checkout GitHub Action'
              uses: actions/checkout@main
            - name: 'Login via Azure CLI'
              uses: azure/login@v1
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            
            - name: Get ACR name
              id: getacrname
              run: |
                acrName=$(az acr list --resource-group ${{ secrets.AZURE_RG_NAME }} --query "[0].name" -o tsv)
                echo "::set-output name=acrName::$acrName"
                  
            - name: Get ACR Credentials
              id: getacrcreds
              run: |
                loginServer=$(az acr list --resource-group ${{ secrets.AZURE_RG_NAME }} --query "[0].loginServer" -o tsv)
                loginName=$(az acr credential show -n ${{ steps.getacrname.outputs.acrName }} --resource-group ${{ secrets.AZURE_RG_NAME }} --query username -o tsv)
                password=$(az acr credential show -n ${{ steps.getacrname.outputs.acrName }} --resource-group ${{ secrets.AZURE_RG_NAME }} --query "passwords[0].value" -o tsv)
                echo "::set-output name=loginServer::$loginServer"
                echo "::set-output name=loginName::$loginName"
                echo "::set-output name=password::$password"
            - name: 'Build and Push API Image to ACR'
              uses: azure/docker-login@v1
              with:
                login-server: ${{ steps.getacrcreds.outputs.loginServer }}
                username: ${{ steps.getacrname.outputs.acrName }}
                password: ${{ steps.getacrcreds.outputs.password }}
            - run: |
                docker build . -t ${{ steps.getacrcreds.outputs.loginServer }}/healthtrackrui:${{ github.sha }}
                docker push ${{ steps.getacrcreds.outputs.loginServer }}/healthtrackrui:${{ github.sha }}
            
    deploy-to-blue:
        runs-on: ubuntu-latest
        needs: [build-container-image]
        steps:
            - name: 'Checkout GitHub Action'
              uses: actions/checkout@main
            
            - name: 'Login via Azure CLI'
              uses: azure/login@v1
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            
            - name: 'Setup dotnet'
              uses: actions/setup-dotnet@v1
              with:
                dotnet-version: ${{ env.DOTNET_VERSION }}
                    
            - name: Get ACR Login Server
              id: getacrserver
              run: |
                loginServer=$(az acr list --resource-group ${{ secrets.AZURE_RG_NAME }} --query "[0].loginServer" -o tsv)
                echo "::set-output name=loginServer::$loginServer"
            
            - name: Get current revision name
              id: getcurrentrevisionname
              run: |
                az extension add -n containerapp --yes
                currentRevision=$(az containerapp revision list -g ${{ secrets.AZURE_RG_NAME }} -n hello-world --query 'reverse(sort_by([].{Revision:name,Replicas:properties.replicas,Active:properties.active,Created:properties.createdTime,FQDN:properties.fqdn}[?Active!=`false`], &Created))| [0].Revision' -o tsv)
                echo "::set-output name=currentRevision::$currentRevision"
            
            - name: 'Deploy to Blue Slot'
              uses: Azure/cli@v1
              with:
                inlineScript: |
                    echo "Installing containerapp extension"
                    az extension add -n containerapp --yes
                    echo "Creating Blue Slot"
                    az containerapp revision copy -n hello-world -g ${{ secrets.AZURE_RG_NAME }} -i ${{ steps.getacrserver.outputs.loginServer }}/healthtrackrui:${{ github.sha }}
                    az containerapp ingress traffic set -n hello-world -g ${{ secrets.AZURE_RG_NAME }} --revision-weight ${{ steps.getcurrentrevisionname.outputs.currentRevision }}=100
                  
            - name: 'Get Blue Slot URL'
              id: getbluesloturl
              run: |
                echo "Installing containerapp extension"
                az extension add -n containerapp --yes
                bluesloturl=$(az containerapp revision list -g ${{ secrets.AZURE_RG_NAME }} -n hello-world --query 'reverse(sort_by([].{Revision:name,Replicas:properties.replicas,Active:properties.active,Created:properties.createdTime,FQDN:properties.fqdn}[?Active!=`false`], &Created))| [0].FQDN' -o tsv)
                echo "::set-output name=bluesloturl::$bluesloturl"
            
    promote-to-green:
        runs-on: ubuntu-latest
        needs: [deploy-to-blue]
        environment: Production
        steps:
            - name: 'Checkout GitHub Action'
              uses: actions/checkout@main
            
            - name: 'Login via Azure CLI'
              uses: azure/login@v1
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            
            - name: Get ACR Login Server
              id: getacrserver
              run: |
                    loginServer=$(az acr list --resource-group ${{ secrets.AZURE_RG_NAME }} --query "[0].loginServer" -o tsv)
                    echo "::set-output name=loginServer::$loginServer"
            
            - name: Get blue slot
              id: getblueslot
              run: |
                az extension add -n containerapp --yes
                blueSlot=$(az containerapp revision list -g ${{ secrets.AZURE_RG_NAME }} -n hello-world --query 'reverse(sort_by([].{Revision:name,Replicas:properties.replicas,Active:properties.active,Created:properties.createdTime,FQDN:properties.fqdn}[?Active!=`false`], &Created))| [0].Revision' -o tsv)
                echo "::set-output name=blueSlot::$blueSlot"
            
            - name: Promote blue to green slot
              uses: Azure/cli@v1
              with:
                inlineScript: |
                    echo "Installing containerapp extension"
                    az extension add -n containerapp --yes
                    echo "Promoting Blue Slot to Green Slot"
                    az containerapp ingress traffic set -n hello-world -g ${{ secrets.AZURE_RG_NAME }} --revision-weight ${{ steps.getblueslot.outputs.blueSlot }}=100